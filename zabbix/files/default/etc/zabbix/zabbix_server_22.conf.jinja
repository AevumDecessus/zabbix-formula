{% from "zabbix/map.jinja" import zabbix with context -%}
{% set settings = salt['pillar.get']('zabbix-server', {}) -%}
# Managed by saltstack. Do not edit this file.
# This is a configuration file for Zabbix Server process
# To get more information about Zabbix,
# visit http://www.zabbix.com

############ GENERAL PARAMETERS #################

### Option: NodeID
#	Unique NodeID in distributed setup.
#	0 - standalone server
#
# Mandatory: no
# Range: 0-999
# Default:
# NodeID=0
{% if settings.get('nodeid', False) %}NodeID={{ settings.get('nodeid') }}
{% endif %}
### Option: ListenPort
#	Listen port for trapper.
#
# Mandatory: no
# Range: 1024-32767
# Default:
# ListenPort=10051
{% if settings.get('listenport', False) %}ListenPort={{ settings.get('listenport') }}
{% endif %}
### Option: SourceIP
#	Source IP address for outgoing connections.
#
# Mandatory: no
# Default:
# SourceIP=
{% if settings.get('sourceip', False) %}SourceIP={{ settings.get('sourceip') }}
{% endif %}
### Option: LogFile
#	Name of log file.
#	If not set, syslog is used.
#
# Mandatory: no
# Default:
# LogFile=
{% if settings.get('logfile', zabbix.server.logfile) != 'syslog') %}
LogFile={{ settings.get('logfile', zabbix.server.logfile) }}
{% endif %}
### Option: LogFileSize
#	Maximum size of log file in MB.
#	0 - disable automatic log rotation.
#
# Mandatory: no
# Range: 0-1024
# Default:
# LogFileSize=1

LogFileSize={{ settings.get('logfilesize', zabbix.server.logfilesize)|int }}

### Option: DebugLevel
#	Specifies debug level
#	0 - no debug
#	1 - critical information
#	2 - error information
#	3 - warnings
#	4 - for debugging (produces lots of information)
#
# Mandatory: no
# Range: 0-4
# Default:
# DebugLevel=3
{% if settings.get('debuglevel', False) %}DebugLevel={{ settings.get('debuglevel') }}
{% endif %}
### Option: PidFile
#	Name of PID file.
#
# Mandatory: no
# Default:
# PidFile=/tmp/zabbix_server.pid

PidFile={{ settings.get('pidfile', zabbix.server.pidfile) }}

### Option: DBHost
#	Database host name.
#	If set to localhost, socket is used for MySQL.
#	If set to empty string, socket is used for PostgreSQL.
#
# Mandatory: no
# Default:
# DBHost=localhost

DBHost={{ settings.get('dbhost', zabbix.server.dbhost) }}

### Option: DBName
#	Database name.
#	For SQLite3 path to database file must be provided. DBUser and DBPassword are ignored.
#
# Mandatory: yes
# Default:
# DBName=

DBName={{ settings.get('dbname', zabbix.server.dbname) }}

### Option: DBSchema
#	Schema name. Used for IBM DB2.
#
# Mandatory: no
# Default:
# DBSchema=
{% if settings.get('dbschema', False) %}DBSchema={{ settings.get('dbschema') }}
{% endif %}
### Option: DBUser
#	Database user. Ignored for SQLite.
#
# Mandatory: no
# Default:
# DBUser=

DBUser={{ settings.get('dbuser', zabbix.server.dbuser) }}

### Option: DBPassword
#	Database password. Ignored for SQLite.
#	Comment this line if no password is used.
#
# Mandatory: no
# Default:
# DBPassword=

DBPassword={{ settings.get('dbpassword', zabbix.server.dbpassword) }}

### Option: DBSocket
#	Path to MySQL socket.
#
# Mandatory: no
# Default:
# DBSocket=/tmp/mysql.sock

DBSocket={{ settings.get('dbsocket', zabbix.server.dbsocket) }}

### Option: DBPort
#	Database port when not using local socket. Ignored for SQLite.
#
# Mandatory: no
# Range: 1024-65535
# Default (for MySQL):
# DBPort=3306
{% if settings.get('dbport', False) %}DBPort={{ settings.get('dbport') }}
{% endif %}
############ ADVANCED PARAMETERS ################

### Option: StartPollers
#	Number of pre-forked instances of pollers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartPollers=5
{% if settings.get('startpollers', False) %}StartPollers={{ settings.get('startpollers') }}
{% endif %}
### Option: StartIPMIPollers
#	Number of pre-forked instances of IPMI pollers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartIPMIPollers=0
{% if settings.get('startipmipollers', False) %}StartIPMIPollers={{ settings.get('startipmipollers') }}
{% endif %}
### Option: StartPollersUnreachable
#	Number of pre-forked instances of pollers for unreachable hosts (including IPMI).
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartPollersUnreachable=1
{% if settings.get('startpollersunreachable', False) %}StartPollersUnreachable={{ settings.get('startpollersunreachable') }}
{% endif %}
### Option: StartTrappers
#	Number of pre-forked instances of trappers.
#	Trappers accept incoming connections from Zabbix sender, active agents, active proxies and child nodes.
#	At least one trapper process must be running to display server availability and view queue
#	in the frontend.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartTrappers=5
{% if settings.get('starttrappers', False) %}StartTrappers={{ settings.get('starttrappers') }}
{% endif %}
### Option: StartPingers
#	Number of pre-forked instances of ICMP pingers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartPingers=1
{% if settings.get('startpingers', False) %}StartPingers={{ settings.get('startpingers') }}
{% endif %}
### Option: StartDiscoverers
#	Number of pre-forked instances of discoverers.
#
# Mandatory: no
# Range: 0-250
# Default:
# StartDiscoverers=1
{% if settings.get('startdiscoverers', False) %}StartDiscoverers={{ settings.get('startdiscoverers') }}
{% endif %}
### Option: StartHTTPPollers
#	Number of pre-forked instances of HTTP pollers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartHTTPPollers=1
{% if settings.get('starthttppollers', False) %}StartHTTPPollers={{ settings.get('starthttppollers') }}
{% endif %}
### Option: StartTimers
#	Number of pre-forked instances of timers.
#	Timers process time-based trigger functions and maintenance periods.
#	Only the first timer process handles the maintenance periods.
#
# Mandatory: no
# Range: 1-1000
# Default:
# StartTimers=1
{% if settings.get('starttimers', False) %}StartTimers={{ settings.get('starttimers') }}
{% endif %}
### Option: JavaGateway
#	IP address (or hostname) of Zabbix Java gateway.
#	Only required if Java pollers are started.
#
# Mandatory: no
# Default:
# JavaGateway=
{% if settings.get('javagateway', False) %}JavaGateway={{ settings.get('javagateway') }}
{% endif %}
### Option: JavaGatewayPort
#	Port that Zabbix Java gateway listens on.
#
# Mandatory: no
# Range: 1024-32767
# Default:
# JavaGatewayPort=10052
{% if settings.get('javagatewayport', False) %}JavaGatewayPort={{ settings.get('javagatewayport') }}
{% endif %}
### Option: StartJavaPollers
#	Number of pre-forked instances of Java pollers.
#
# Mandatory: no
# Range: 0-1000
# Default:
# StartJavaPollers=0
{% if settings.get('startjavapollers', False) %}StartJavaPollers={{ settings.get('startjavapollers') }}
{% endif %}
### Option: StartVMwareCollectors
#	Number of pre-forked vmware collector instances.
#
# Mandatory: no
# Range: 0-250
# Default:
# StartVMwareCollectors=0
{% if settings.get('startvmwarecollectors', False) %}StartVMwareCollectors={{ settings.get('startvmwarecollectors') }}
{% endif %}
### Option: VMwareFrequency
#	How often Zabbix will connect to VMware service to obtain a new data.
#
# Mandatory: no
# Range: 10-86400
# Default:
# VMwareFrequency=60
{% if settings.get('vmwarefrequency', False) %}VMwareFrequency={{ settings.get('vmwarefrequency') }}
{% endif %}
### Option: VMwarePerfFrequency
#	How often Zabbix will connect to VMware service to obtain performance data.
#
# Mandatory: no
# Range: 10-86400
# Default:
# VMwarePerfFrequency=60
{% if settings.get('vmwareperffrequency', False) %}VMwarePerfFrequency={{ settings.get('vmwareperffrequency') }}
{% endif %}
### Option: VMwareCacheSize
#	Size of VMware cache, in bytes.
#	Shared memory size for storing VMware data.
#	Only used if VMware collectors are started.
#
# Mandatory: no
# Range: 256K-2G
# Default:
# VMwareCacheSize=8M
{% if settings.get('vmwarecachesize', False) %}VMwareCacheSize={{ settings.get('vmwarecachesize') }}
{% endif %}
### Option: VMwareTimeout
#	Specifies how many seconds vmware collector waits for response from VMware service.
#
# Mandatory: no
# Range: 1-300
# Default:
# VMwareTimeout=10
{% if settings.get('vmwaretimeout', False) %}VMwareTimeout={{ settings.get('vmwaretimeout') }}
{% endif %}
### Option: EnableSNMPBulkRequests
#	Enable or disable SNMP bulk requests.
#	0 - disable
#	1 - enable
#
# Mandatory: no
# Default:
# EnableSNMPBulkRequests=1
{% if settings.get('enablesnmpbulkrequests', False) %}EnableSNMPBulkRequests={{ settings.get('enablesnmpbulkrequests') }}
{% endif %}
### Option: SNMPTrapperFile
#	Temporary file used for passing data from SNMP trap daemon to the server.
#	Must be the same as in zabbix_trap_receiver.pl or SNMPTT configuration file.
#
# Mandatory: no
# Default:
# SNMPTrapperFile=/tmp/zabbix_traps.tmp
{% if settings.get('snmptrapperfile', False) %}SNMPTrapperFile={{ settings.get('snmptrapperfile') }}
{% endif %}
### Option: StartSNMPTrapper
#	If 1, SNMP trapper process is started.
#
# Mandatory: no
# Range: 0-1
# Default:
# StartSNMPTrapper=0
{% if settings.get('startsnmptrapper', False) %}StartSNMPTrapper={{ settings.get('startsnmptrapper') }}
{% endif %}
### Option: ListenIP
#	List of comma delimited IP addresses that the trapper should listen on.
#	Trapper will listen on all network interfaces if this parameter is missing.
#
# Mandatory: no
# Default:
# ListenIP=0.0.0.0
{% if settings.get('listenip', False) %}ListenIP={{ settings.get('listenip') }}
{% endif %}
### Option: HousekeepingFrequency
#	How often Zabbix will perform housekeeping procedure (in hours).
#	Housekeeping is removing outdated information from the database.
#	To prevent Housekeeper from being overloaded, no more than 4 times HousekeepingFrequency
#	hours of outdated information are deleted in one housekeeping cycle, for each item.
#
# Mandatory: no
# Range: 1-24
# Default:
# HousekeepingFrequency=1
{% if settings.get('housekeepingfrequency', False) %}HousekeepingFrequency={{ settings.get('housekeepingfrequency') }}
{% endif %}
### Option: MaxHousekeeperDelete
#	The table "housekeeper" contains "tasks" for housekeeping procedure in the format:
#	[housekeeperid], [tablename], [field], [value].
#	No more than 'MaxHousekeeperDelete' rows (corresponding to [tablename], [field], [value])
#	will be deleted per one task in one housekeeping cycle.
#	SQLite3 does not use this parameter, deletes all corresponding rows without a limit.
#	If set to 0 then no limit is used at all. In this case you must know what you are doing!
#
# Mandatory: no
# Range: 0-1000000
# Default:
# MaxHousekeeperDelete=500
{% if settings.get('maxhousekeeperdelete', False) %}MaxHousekeeperDelete={{ settings.get('maxhousekeeperdelete') }}
{% endif %}
### Option: SenderFrequency
#	How often Zabbix will try to send unsent alerts (in seconds).
#
# Mandatory: no
# Range: 5-3600
# Default:
# SenderFrequency=30
{% if settings.get('senderfrequency', False) %}SenderFrequency={{ settings.get('senderfrequency') }}
{% endif %}
### Option: CacheSize
#	Size of configuration cache, in bytes.
#	Shared memory size for storing host, item and trigger data.
#
# Mandatory: no
# Range: 128K-8G
# Default:
# CacheSize=8M
{% if settings.get('cachesize', False) %}CacheSize={{ settings.get('cachesize') }}
{% endif %}
### Option: CacheUpdateFrequency
#	How often Zabbix will perform update of configuration cache, in seconds.
#
# Mandatory: no
# Range: 1-3600
# Default:
# CacheUpdateFrequency=60
{% if settings.get('cacheupdatefrequency', False) %}CacheUpdateFrequency={{ settings.get('cacheupdatefrequency') }}
{% endif %}
### Option: StartDBSyncers
#	Number of pre-forked instances of DB Syncers
#
# Mandatory: no
# Range: 1-100
# Default:
# StartDBSyncers=4
{% if settings.get('startdbsyncers', False) %}StartDBSyncers={{ settings.get('startdbsyncers') }}
{% endif %}
### Option: HistoryCacheSize
#	Size of history cache, in bytes.
#	Shared memory size for storing history data.
#
# Mandatory: no
# Range: 128K-2G
# Default:
# HistoryCacheSize=8M
{% if settings.get('historycachesize', False) %}HistoryCacheSize={{ settings.get('historycachesize') }}
{% endif %}
### Option: TrendCacheSize
#	Size of trend cache, in bytes.
#	Shared memory size for storing trends data.
#
# Mandatory: no
# Range: 128K-2G
# Default:
# TrendCacheSize=4M
{% if settings.get('trendcachesize', False) %}TrendCacheSize={{ settings.get('trendcachesize') }}
{% endif %}
### Option: HistoryTextCacheSize
#	Size of text history cache, in bytes.
#	Shared memory size for storing character, text or log history data.
#
# Mandatory: no
# Range: 128K-2G
# Default:
# HistoryTextCacheSize=16M

### Option: ValueCacheSize
#	Size of history value cache, in bytes.
#	Shared memory size for caching item history data requests
#	Setting to 0 disables value cache.
#
# Mandatory: no
# Range: 0,128K-64G
# Default:
# ValueCacheSize=8M
{% if settings.get('valuecachesize', False) %}ValueCacheSize={{ settings.get('valuecachesize') }}
{% endif %}
### Option: NodeNoEvents
#	If set to '1' local events won't be sent to master node.
#	This won't impact ability of this node to propagate events from its child nodes.
#
# Mandatory: no
# Range: 0-1
# Default:
# NodeNoEvents=0
{% if settings.get('nodenoevents', False) %}NodeNoEvents={{ settings.get('nodenoevents') }}
{% endif %}
### Option: NodeNoHistory
#	If set to '1' local history won't be sent to master node.
#	This won't impact ability of this node to propagate history from its child nodes.
#
# Mandatory: no
# Range: 0-1
# Default:
# NodeNoHistory=0
{% if settings.get('nodenohistory', False) %}NodeNoHistory={{ settings.get('nodenohistory') }}
{% endif %}
### Option: Timeout
#	Specifies how long we wait for agent, SNMP device or external check (in seconds).
#
# Mandatory: no
# Range: 1-30
# Default:
# Timeout=3
{% if settings.get('timeout', False) %}Timeout={{ settings.get('timeout') }}
{% endif %}
### Option: TrapperTimeout
#	Specifies how many seconds trapper may spend processing new data.
#
# Mandatory: no
# Range: 1-300
# Default:
# TrapperTimeout=300
{% if settings.get('trappertimeout', False) %}TrapperTimeout={{ settings.get('trappertimeout') }}
{% endif %}
### Option: UnreachablePeriod
#	After how many seconds of unreachability treat a host as unavailable.
#
# Mandatory: no
# Range: 1-3600
# Default:
# UnreachablePeriod=45
{% if settings.get('unreachableperiod', False) %}UnreachablePeriod={{ settings.get('unreachableperiod') }}
{% endif %}
### Option: UnavailableDelay
#	How often host is checked for availability during the unavailability period, in seconds.
#
# Mandatory: no
# Range: 1-3600
# Default:
# UnavailableDelay=60
{% if settings.get('unavailabledelay', False) %}UnavailableDelay={{ settings.get('unavailabledelay') }}
{% endif %}
### Option: UnreachableDelay
#	How often host is checked for availability during the unreachability period, in seconds.
#
# Mandatory: no
# Range: 1-3600
# Default:
# UnreachableDelay=15
{% if settings.get('unreachabledelay', False) %}UnreachableDelay={{ settings.get('unreachabledelay') }}
{% endif %}
### Option: AlertScriptsPath
#	Full path to location of custom alert scripts.
#	Default depends on compilation options.
#
# Mandatory: no
# Default:
# AlertScriptsPath=${datadir}/zabbix/alertscripts

AlertScriptsPath={{ settings.get('alertscriptspath', zabbix.server.alertscriptspath) }}

### Option: ExternalScripts
#	Full path to location of external scripts.
#	Default depends on compilation options.
#
# Mandatory: no
# Default:
# ExternalScripts=${datadir}/zabbix/externalscripts

ExternalScripts={{ settings.get('externalscripts', zabbix.server.externalscripts) }}

### Option: FpingLocation
#	Location of fping.
#	Make sure that fping binary has root ownership and SUID flag set.
#
# Mandatory: no
# Default:
# FpingLocation=/usr/sbin/fping

FpingLocation={{ settings.get('fpinglocation', zabbix.server.fpinglocation) }}

### Option: Fping6Location
#	Location of fping6.
#	Make sure that fping6 binary has root ownership and SUID flag set.
#	Make empty if your fping utility is capable to process IPv6 addresses.
#
# Mandatory: no
# Default:
# Fping6Location=/usr/sbin/fping6

Fping6Location={{ settings.get('fping6location', zabbix.server.fping6location) }}

### Option: SSHKeyLocation
#	Location of public and private keys for SSH checks and actions.
#
# Mandatory: no
# Default:
# SSHKeyLocation=
{% if settings.get('sshkeylocation', False) %}SSHKeyLocation={{ settings.get('sshkeylocation') }}
{% endif %}
### Option: LogSlowQueries
#	How long a database query may take before being logged (in milliseconds).
#	Only works if DebugLevel set to 3 or 4.
#	0 - don't log slow queries.
#
# Mandatory: no
# Range: 1-3600000
# Default:
# LogSlowQueries=0
{% if settings.get('logslowqueries', False) %}LogSlowQueries={{ settings.get('logslowqueries') }}
{% endif %}
### Option: TmpDir
#	Temporary directory.
#
# Mandatory: no
# Default:
# TmpDir=/tmp
{% if settings.get('tmpdir', False) %}TmpDir={{ settings.get('tmpdir') }}
{% endif %}
### Option: StartProxyPollers
#	Number of pre-forked instances of pollers for passive proxies.
#
# Mandatory: no
# Range: 0-250
# Default:
# StartProxyPollers=1
{% if settings.get('startproxypollers', False) %}StartProxyPollers={{ settings.get('startproxypollers') }}
{% endif %}
### Option: ProxyConfigFrequency
#	How often Zabbix Server sends configuration data to a Zabbix Proxy in seconds.
#	This parameter is used only for proxies in the passive mode.
#
# Mandatory: no
# Range: 1-3600*24*7
# Default:
# ProxyConfigFrequency=3600
{% if settings.get('proxyconfigfrequency', False) %}ProxyConfigFrequency={{ settings.get('proxyconfigfrequency') }}
{% endif %}
### Option: ProxyDataFrequency
#	How often Zabbix Server requests history data from a Zabbix Proxy in seconds.
#	This parameter is used only for proxies in the passive mode.
#
# Mandatory: no
# Range: 1-3600
# Default:
# ProxyDataFrequency=1
{% if settings.get('proxydatafrequency', False) %}ProxyDataFrequency={{ settings.get('proxydatafrequency') }}
{% endif %}
### Option: AllowRoot
#	Allow the server to run as 'root'. If disabled and the server is started by 'root', the server
#	will try to switch to user 'zabbix' instead. Has no effect if started under a regular user.
#	0 - do not allow
#	1 - allow
#
# Mandatory: no
# Default:
# AllowRoot=0
{% if settings.get('allowroot', False) %}AllowRoot={{ settings.get('allowroot') }}
{% endif %}
### Option: Include
#	You may include individual files or all files in a directory in the configuration file.
#	Installing Zabbix will create include directory in /usr/local/etc, unless modified during the compile time.
#
# Mandatory: no
# Default:
# Include=
{% if 'include' in settings and settings['include'] is string -%}
{%   do settings.update({'includes': [settings['include']]}) -%}
{% endif -%}
{% if 'includes' in settings or 'includes' in zabbix.server -%}
{% for include in settings.get('includes', zabbix.server.includes) %}
Include={{ include }}
{%- endfor %}
{%- endif %}

####### LOADABLE MODULES #######

### Option: LoadModulePath
#	Full path to location of server modules.
#	Default depends on compilation options.
#
# Mandatory: no
# Default:
# LoadModulePath=${libdir}/modules
{% if settings.get('loadmodulepath', false) %}LoadModulePath={{ settings.get('loadmodulepath') }}
{% endif %}
### Option: LoadModule
#	Module to load at server startup. Modules are used to extend functionality of the server.
#	Format: LoadModule=<module.so>
#	The modules must be located in directory specified by LoadModulePath.
#	It is allowed to include multiple LoadModule parameters.
#
# Mandatory: no
# Default:
# LoadModule=
{% for loadmodule in settings.get('loadmodules', []) -%}
LoadModule={{ loadmodule }}
{% endfor %}
{{ settings.get('extra_conf','') }}